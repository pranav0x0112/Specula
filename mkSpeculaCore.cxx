/*
 * Generated by Bluespec Compiler, version 2025.01.1-8-ge9187c10 (build e9187c10)
 * 
 * On Tue Jun 24 12:48:14 IST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkSpeculaCore.h"


/* String declarations */
static std::string const __str_literal_1("[Specula] PC: %0d Instr: %h | opcode: %b rd: %0d rs1: %0d rs2: %0d",
					 66u);


/* Constructor */
MOD_mkSpeculaCore::MOD_mkSpeculaCore(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_pc(simHdl, "pc", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkSpeculaCore::init_symbols_0()
{
  init_symbol(&symbols[0u], "pc", SYM_MODULE, &INST_pc);
  init_symbol(&symbols[1u], "RL_fetch_and_decode", SYM_RULE);
}


/* Rule actions */

void MOD_mkSpeculaCore::RL_fetch_and_decode()
{
  tUInt32 DEF_x__h239;
  tUInt8 DEF_d_rd__h128;
  tUInt8 DEF_d_rs1__h129;
  tUInt8 DEF_d_rs2__h130;
  tUInt32 DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7;
  tUInt8 DEF_d_opcode__h127;
  tUInt32 DEF_pc__h103;
  DEF_pc__h103 = INST_pc.METH_read();
  switch (DEF_pc__h103) {
  case 0u:
    DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 = 5243155u;
    break;
  case 4u:
    DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 = 2130355u;
    break;
  case 8u:
    DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 = 0u;
    break;
  default:
    DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 = 19u;
  }
  DEF_d_opcode__h127 = (tUInt8)((tUInt8)127u & DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7);
  DEF_d_rs2__h130 = (tUInt8)((tUInt8)31u & (DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 >> 20u));
  DEF_d_rs1__h129 = (tUInt8)((tUInt8)31u & (DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 >> 15u));
  DEF_d_rd__h128 = (tUInt8)((tUInt8)31u & (DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7 >> 7u));
  DEF_x__h239 = DEF_pc__h103 + 4u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,32,32,7,5,5,5",
		   &__str_literal_1,
		   DEF_pc__h103,
		   DEF_IF_pc_EQ_0_THEN_0x500113_ELSE_IF_pc_EQ_4_THEN__ETC___d7,
		   DEF_d_opcode__h127,
		   DEF_d_rd__h128,
		   DEF_d_rs1__h129,
		   DEF_d_rs2__h130);
  INST_pc.METH_write(DEF_x__h239);
}


/* Methods */


/* Reset routines */

void MOD_mkSpeculaCore::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_pc.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkSpeculaCore::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkSpeculaCore::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_pc.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkSpeculaCore::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_pc.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkSpeculaCore::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSpeculaCore &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkSpeculaCore::vcd_defs(tVCDDumpType dt, MOD_mkSpeculaCore &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkSpeculaCore::vcd_prims(tVCDDumpType dt, MOD_mkSpeculaCore &backing)
{
  INST_pc.dump_VCD(dt, backing.INST_pc);
}
